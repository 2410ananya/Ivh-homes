import requests
import time
import string

url = "http://35.200.185.69:8000/v1/autocomplete"
cooldown_time = 10  # Start with 10 sec, dynamically increase if needed
request_count = 0  # Counter to track number of requests

def fetch_names():
    global request_count  # Track total requests
    collected_names = set()
    search_queries = list(string.ascii_lowercase)  # Start with "a" to "z"
    seen_queries = set()  # Track already searched queries

    while search_queries:
        query = search_queries.pop(0)
        if query in seen_queries:
            continue
        seen_queries.add(query)

        try:
            response = requests.get(url, params={"query": query})
            request_count += 1  # Increment request count

            if response.status_code == 200:
                data = response.json()
                names = data.get("results", [])
                collected_names.update(names)
                print(f" Query '{query}' -> {len(names)} names found.")

                for name in names:
                    if len(name) > len(query):
                        new_prefix = name[: len(query) + 1]
                        if new_prefix not in seen_queries:
                            search_queries.append(new_prefix)

                time.sleep(0.01)  # Small delay between queries

            elif response.status_code == 429:
                global cooldown_time
                print(f" 429 Rate Limit Hit! Waiting {cooldown_time} seconds...")
                time.sleep(cooldown_time)
                cooldown_time = min(cooldown_time * 1.5, 60)  # Increase delay gradually up to 60 sec
                search_queries.append(query)  # Retry same query

        except requests.RequestException as e:
            print(f" API Error for '{query}': {e}")
            time.sleep(5)  # Small wait before retry

        #  **After 100 requests wait 15sec **
        if request_count % 100 == 0:
            print(" 100 requests completed. Waiting 15 seconds...")
            time.sleep(15)

    return collected_names

# Run function
all_names = fetch_names()
print(f"Total Unique Names Collected: {len(all_names)}")
print(all_names)

